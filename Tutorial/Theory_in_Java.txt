Interpreter :
    one statement at a time 
    An interpreter is needed every time 
    Partial execution if an error occurs in the program.
    Easy for programmers.

Compiler :
    Entire program at a time 
    Once compiled, it is not needed 
    No execution if an error occurs 
    Usually not as easy as interpreted once 


java Harry.java  -  compiles
java Harry.class -  Interpreted 

java file --> (Compile by using  javac) --> class File -- (Using java Interpreter for OutPut)

================================///////////////// PACKAGE \\\\\\\\\\\\\================================
    
package is like a folder where store class,User define Class /Logic are Store .....those are can Use In Other Java program by import those package
    
    CREATE Package-------------
     javac -d . *.java  {CREATE All java File}
     javac -d . <name>.java {only CREATE That file}

.>>>>>>>>>>> Import a pre/User-define package
    import.java.util.* - import All Method Under the Name of util
    import.java.string -   only import string from java long 
    java.util.Scanner scanner = new java.util.Scanner(System.in); ---->   use without importing but using Direct......

============================/////////////////////  ACCESS MODIFIER \\\\\\\\\\\\\\\\\\\\=========================================

Access Modifier 	within class 	within package 	outside package by subclass only 	outside package(world)
public 	                Y 	            Y 	                    Y 	                            Y
protected 	            Y 	            Y 	                    Y 	                            N
Default 	            Y 	            Y 	                    N 	                            N
private 	            Y 	            N 	                    N 	                            N

====================================/////////////////////////// THREAD \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\===X========================

By Using this We can Run Multiple function in parallel-

------------- LIFE CYCLE OF THREAD ]]]]]]]]]]]]]]]]]]]]]]]

    New - Instance of thread created which is not yet started by involving start(). In this state, the thread is also known as the born thread. start()
    |
    v
    Runnable - After invocation of start()& before it is selected to be run by the scheduler. run()
    |                                                            ^
    v                                                            |
    Running - After the thread scheduler has selected it.        |
    |                                                            |
    v                                                            | sleep()/ wait()
    Non-runnable - thread alive, not eligible to run. ------------
    |
    v
    Terminated - run() method has exited. Complete the execution

------------- priority set of thread ]]]]]]]]]]]]]]]]]]]]]]]]

    For In case of making App or Website We have to Set priority ,,Or should tell--> Fixed that which function will run more & which will less In parallel... which Fun  will run more time which Normal Which Less...

    The following static final integer constants are defined in the Thread class:
    MIN_PRIORITY: Minimum priority that a thread can have. Value is 1.
    NORM_PRIORITY: This is the default priority automatically assigned by JVM to a thread if a programmer does not explicitly set the priority of that thread. Value is 5.
    MAX_PRIORITY: Maximum priority that a thread can have. Value is 10.

    ---------> Used:  setPriority(); 
    =============================////////////// ERROR & EXCEPTION \\\\\\\\\\===========================

>>>There are three *types of errors* in java.
1) Syntax errors -----------> haven't Declare the variable type or forget to put ';'
2) Logical errors  ------------> Logical mistake {lack of domain Knowledge}
3) Runtime errors- also called Exceptions  -------------------- Like user have put wrong input or Exceed the Array size which you have declare

>>>Following are few commonly occurring *exceptions* in java:
1) Null pointer exception
2) Arithmetic Exception --> 
3) Array Index out of Bound exception
4) Illegal Argument Exception
5) Number Format Exception

--------------- Try - Catch Block ---------]]]]]]]]]]]]]]]]]]]]
try {
            *CODE* that can Produce an Error that Failed the execution {int c = a / b;  System.out.print("The result is " + c);} (if b=0 given then mathematical error came)
            As we known that this Can give an runtime not always but some time that use this ... Try and if it given an error then Catch it and we write We will do for that error 
        }
catch(Exception e) {
            * if Exception came thn print this Don't STOP THE PROGRAM AND going on For further code execution....We don't want show that its our fault that you given wrong input we pass a massage ,,,,
            {System.out.print("We failed to divide. Reason: "); System.out.print(e);}
        }

------------- Throw & Throws ]]]]]]]]]

For Create custom Exception Class, Have to extends from "Exception" 
Throw : == Use for Throw custom Create ExceptionClass or Pre-define ExceptionClass/ Throw  Basically Syntax For Using Exception Class ...
Throws: == It Use for Tell User To Use Carefully because it  may be throw an Exception.... It Used in time of Creating Method.. .
            Throws java throws keyword is used to declare an exception.

------------- Finally -------]]]]]]]]]]]]]]]

Finally block contains the code which is always executed whether the exception is handled or not.
It is used to exception is handled or not.
It is used to execute code containing instructions to release the system resources, close a connection etc.

Code in Finally Block Those execute in Any CAse... In CAse of USing This In a method which a return type and The FInal Block Is after the return statement Then Even return Value THe Finally Will execute.......... (See In program)


=========================////////////////////// COLLECTION FRAMEWORK \\\\\\\\\\\\\\\\================================

A collection represents a group of object Java collections provide classes and Interfaces for us to be able to write code interfaces for us to be able to write code quickly and efficiently 

For ex: we use arrays to store integers but what if we cant Normally resize this array or can't Add or do other operation by method...

In This framework have many new things ----
ArrayList  --> Re-sizeable array
Set -> For distinct collection
Stack-> A LIFO data structure 
HashMap -> For strong key - value pairs
Linkdlist 
this are present by default we can just use their method freely

-------------------- Hashing ------]]]]]]]]]]]]]]

its a technic where elements insert not serially but index = element % size;
here don't present a single element multiple time..
the array called hashtable
HelpFull For searching operation

Hash Collision :
Collision: The hash function may map two key values to a single index. Such a situation is known as a collision.
if there two or more than number with same reminder/index... it will problem for who will insert in that index...

Following techniques are used to avoid collision in hashing :---=-=-----

Open addressing :--> Here tell that after coming that element will insert next blanc index (if have two ele with 2 reminder then one will insert   in 2 index and another one insert in 3rd index).... and if other element who will originally belong that index (reminder 3) then it will insert in next index.. and so on
Chaining : ----> If occurs two element with same index then by that index point to an linklist whose those same index elements.....

Load Factor:--> It is a measure that decides when to increase the HashTable capacity to maintain the search and insert operation complexity of O(1)


this collection package contain more class whose flow this hashing technic
1. HashMap
2. HashSet
3. Linked HashMap
4. HashTable


============================/////////////////////// DATE AND TIME - Formatter \\\\\\\\\\\\\\\\\\====================


Patterns for formatting and parsing : Syntax used in OfPattern() method as String
visit : https://docs.oracle.com/en/java/javase/14/docs/api/java.base/java/time/format/DateTimeFormatter.html#method.summary

Pattern letters for all the alphabets(capital as well as small) are defined as follows :
 Symbol 	Meaning                      	Presentation      	Examples
  G     	 era                         	 text             	 AD; Anno Domini; A
  u     	 year                        	 year             	 2004; 04
  y     	 year-of-era                 	 year             	 2004; 04
  D     	 day-of-year                 	 number           	189
  M/L   	 month-of-year               	 number/text      	 7; 07; Jul; July; J
  d     	 day-of-month                	 number           	10
  Q/q   	 quarter-of-year             	 number/text      	 3; 03; Q3; 3rd quarter
  Y     	 week-based-year             	 year             	 1996; 96
  w     	 week-of-week-based-year     	 number           	27
  W     	 week-of-month               	 number           	4
  E     	 day-of-week                 	 text             	 Tue; Tuesday; T
  e/c   	 localized day-of-week       	 number/text      	 2; 02; Tue; Tuesday; T
  F     	 week-of-month               	 number           	3
  a     	 am-pm-of-day                	 text             	 PM
  h     	 clock-hour-of-am-pm (1-12)  	 number           	12
  K     	 hour-of-am-pm (0-11)        	 number           	0
  k     	 clock-hour-of-am-pm (1-24)  	 number           	0
  H     	 hour-of-day (0-23)          	 number           	0
  m     	 minute-of-hour              	 number           	30
  s     	 second-of-minute            	 number           	55
  S     	 fraction-of-second          	 fraction         	978
  A     	 milli-of-day                	 number           	1234
  n     	 nano-of-second              	 number           	987654321
  N     	 nano-of-day                 	 number           	1234000000
  V     	 time-zone ID                	 zone-id          	 America/Los_Angeles; Z; -08:30
  z     	 time-zone name              	 zone-name        	 Pacific Standard Time; PST
  O     	 localized zone-offset       	 offset-O         	 GMT+8; GMT+08:00; UTC-08:00;
  X     	 zone-offset 'Z' for zero    	 offset-X         	 Z; -08; -0830; -08:30; -083015; -08:30:15;
  x     	 zone-offset                 	 offset-x         	 +0000; -08; -0830; -08:30; -083015; -08:30:15;
  Z     	 zone-offset                 	 offset-Z         	 +0000; -0800; -08:00;
  p     	 pad next                    	 pad modifier     	1
  '     	 escape for text             	 delimiter        	 
  ''    	 single quote                	 literal          	 '
  [     	 optional section start      	                  	                                                  
  ]     	 optional section end        	                  	                                                  
  #     	 reserved for future use     	                  	                                                  
  {     	 reserved for future use     	                  	                                                  
  }     	 reserved for future use     	                  	 

 
//////////////////////////=================== CREATING JAVA dOCS PAGE =================\\\\\\\\\\\\\\\\\

in Terminal write this code --------
---------------------------

ls
mkdir <name>HTML
javadoc -d <name>HTML <name>.java 
-----------------------------
By DOing this the file will be ready............


\\\\\\\\\\\\\\\\\\\\\\\\================ Annotation ===================\\\\\\\\\\\\\\\\\\\\\\\\\\

@Deprecated :
    This annotation is used to mark a deprecated method.
    If developer uses the deprecated method then the compiler generated a warning
    >> This Annotation Use for declare your Own Method to be a deprecated method

@SuppressWarnings :
    This annotation helps us to suppress some warnings that are being generated by compiler. 
    /* CODE/
        @SuppressWarnings({"unchecked", "deprecated"})
        @SuppressWarnings("deprecation")
            AndroidPhone Samsung = new AndroidPhone();
            Samsung.sendMessage();
    /*CODE/
    >> Using This you Can Ignore Any Kind of warning Which Compiler Given At Compile Time.....

@FunctionInterface :
    An interface which contains only one abstract method is known as functional interface.
    @FunctionInterface annotation helps us to make sure that a functional interface is not having more than one abstract method. 
   >> If You tag this annotation then it amplify that this interface Should Only contain ONE abstract Method

